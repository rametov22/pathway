from io import BytesIO
import os
import django
import logging
from django.utils.timezone import now
from django.conf import settings
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, InputFile
from asgiref.sync import sync_to_async
from telegram.ext import (
    CommandHandler,
    CallbackQueryHandler,
    Application,
    ContextTypes,
)

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings")
django.setup()

from apps.services_app.models import ServiceApplication, ConsultationRequest
from apps.accounts_app.models import ApplicationDocument
from apps.news_app.models import UserNotification

TELEGRAM_BOT_TOKEN = settings.TELEGRAM_BOT_TOKEN
TELEGRAM_ADMIN_CHAT_ID = settings.TELEGRAM_ADMIN_CHAT_ID
TELEGRAM_GROUP_CHAT_ID = settings.TELEGRAM_GROUP_CHAT_ID

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def create_user_notification(user, title, body):
    """–°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await sync_to_async(UserNotification.objects.create)(
        user=user, title=title, body=body
    )


#
async def send_application_notification(application):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É –≤ –¢–µ–ª–µ–≥—Ä–∞–º"""

    message_text = (
        f"üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {application.user.email}\n"
        f"üîπ –°–µ—Ä–≤–∏—Å: {application.service.title}\n"
        f"üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {application.created_at.strftime('%Y-%m-%d %H:%M')}"
    )

    keyboard = [
        [
            InlineKeyboardButton(
                "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{application.id}"
            ),
            InlineKeyboardButton(
                "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{application.id}"
            ),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    await application.bot.send_message(
        chat_id=TELEGRAM_GROUP_CHAT_ID, text=message_text, reply_markup=reply_markup
    )


async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫"""

    query = update.callback_query
    await query.answer()

    action, app_id = query.data.split("_")
    app_id = int(app_id)

    admin_name = query.from_user.full_name
    admin_username = query.from_user.username

    try:
        application = await sync_to_async(
            lambda: ServiceApplication.objects.select_related("service").get(id=app_id)
        )()
    except ServiceApplication.DoesNotExist:
        await query.edit_message_text(text="‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    service_title = await sync_to_async(lambda: application.service.title)()
    service_user = await sync_to_async(lambda: application.user)()

    admin_info = (
        f"üë§ {admin_name} (@{admin_username})" if admin_username else f"üë§ {admin_name}"
    )

    if action == "approve":
        await sync_to_async(lambda: setattr(application, "status", "approved"))()
        await sync_to_async(application.save)()

        await query.edit_message_text(
            text=f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ **{service_title}** –æ–¥–æ–±—Ä–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {service_user}!\n\n"
            f"üë§ –û–¥–æ–±—Ä–∏–ª: {admin_info}"
        )

    elif action == "reject":
        await sync_to_async(lambda: setattr(application, "status", "rejected"))()
        await sync_to_async(application.save)()

        await query.edit_message_text(
            text=f"‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ **{service_title}** –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {service_user}!\n\n"
            f"üë§ –û—Ç–∫–ª–æ–Ω–∏–ª: {admin_info}"
        )


#
async def send_application_document_notification(document):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ Telegram –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""

    application = await sync_to_async(lambda: document.application)()
    application_title = await sync_to_async(
        lambda: application.default_application.title
    )()
    user_email = await sync_to_async(lambda: document.user.email)()

    message_text = (
        f"üìë *–ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!*\n\n"
        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_email}\n"
        f"üìÑ *–§–∞–π–ª:* {document.title}\n"
        f"üìù *–ó–∞—è–≤–∫–∞:* {application_title}\n"
        f"üìÖ *–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏:* {document.uploaded_at.strftime('%Y-%m-%d %H:%M')}\n"
    )

    keyboard = [
        [
            InlineKeyboardButton(
                "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_doc_{document.id}"
            ),
            InlineKeyboardButton(
                "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_doc_{document.id}"
            ),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    file_path = document.file.path
    with open(file_path, "rb") as file:
        file_data = BytesIO(file.read())
        file_data.name = os.path.basename(file_path)

        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

        await application.bot.send_document(
            chat_id=TELEGRAM_GROUP_CHAT_ID,
            document=InputFile(file_data),
            caption=message_text,
            reply_markup=reply_markup,
            parse_mode="Markdown",
        )


async def handle_document_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    parts = query.data.split("_")
    action = f"{parts[0]}_{parts[1]}"
    document_id = int(parts[2])

    admin_name = query.from_user.full_name
    admin_username = query.from_user.username

    document = await sync_to_async(
        lambda: ApplicationDocument.objects.filter(id=document_id)
        .select_related("user", "application")
        .first()
    )()

    if not document:
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚ùå –î–æ–∫—É–º–µ–Ω—Ç —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
        )
        return

    user = await sync_to_async(lambda: document.user)()
    application = await sync_to_async(lambda: document.application)()
    application_title = await sync_to_async(
        lambda: application.default_application.title
    )()

    admin_info = (
        f"üë§ {admin_name} (@{admin_username})" if admin_username else f"üë§ {admin_name}"
    )

    if action == "approve_doc":
        await sync_to_async(lambda: setattr(application, "status", "approved"))()
        await sync_to_async(application.save)()

        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω, –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}\n"
            f"üìÑ –§–∞–π–ª: {document.title}\n"
            f"üìù –ó–∞—è–≤–∫–∞: {application_title}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {document.uploaded_at.strftime('%Y-%m-%d %H:%M')}\n"
            f"‚úÖ –û–¥–æ–±—Ä–∏–ª: {admin_info}",
        )

    elif action == "reject_doc":
        await sync_to_async(document.delete)()

        await sync_to_async(lambda: setattr(application, "status", "rejected"))()
        await sync_to_async(application.save)()

        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}\n"
            f"üìÑ –§–∞–π–ª: {document.title}\n"
            f"üìù –ó–∞—è–≤–∫–∞: {application_title}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {document.uploaded_at.strftime('%Y-%m-%d %H:%M')}\n"
            f"üö® –û—Ç–∫–ª–æ–Ω–∏–ª: {admin_info}",
        )

    await query.delete_message()


#
async def send_consultation_notification(consultation):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ –¢–µ–ª–µ–≥—Ä–∞–º –æ –Ω–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""

    message_text = (
        f"üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {consultation.user.email}\n"
        f"üìõ –ò–º—è: {consultation.full_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {consultation.phone_number}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {consultation.date_of_birth.strftime('%Y-%m-%d')}\n"
        f"‚ùì –í–æ–ø—Ä–æ—Å: {consultation.question}\n"
        f"üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {consultation.created_at.strftime('%Y-%m-%d %H:%M')}\n"
        f"üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {consultation.day_week}\n"
        f"üöö –£—Å–ª—É–≥–∞: {consultation.service_of_interest}\n"
        f"üìö –£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {consultation.level_education}\n"
    )

    keyboard = [
        [InlineKeyboardButton("üì© –Ø –æ—Ç–≤–µ—á—É", callback_data=f"take_{consultation.id}")],
        [
            InlineKeyboardButton(
                "‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ", callback_data=f"answered_{consultation.id}"
            )
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    await application.bot.send_message(
        chat_id=TELEGRAM_GROUP_CHAT_ID,
        text=message_text,
        reply_markup=reply_markup,
        parse_mode="Markdown",
    )


async def handle_consultation_button(
    update: Update, context: ContextTypes.DEFAULT_TYPE
):
    query = update.callback_query
    await query.answer()

    action, consultation_id = query.data.split("_")
    consultation_id = int(consultation_id)

    admin_name = query.from_user.full_name
    admin_username = query.from_user.username

    consultation = await sync_to_async(
        lambda: ConsultationRequest.objects.filter(id=consultation_id).first()
    )()

    if not consultation:
        await query.edit_message_text(text="‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    user = await sync_to_async(lambda: consultation.user)()
    admin_info = (
        f"üë§ {admin_name} (@{admin_username})" if admin_username else f"üë§ {admin_name}"
    )

    if action == "take":
        await sync_to_async(lambda: setattr(consultation, "status", "in_progress"))()
        await sync_to_async(consultation.save)()

        keyboard = [
            [
                InlineKeyboardButton(
                    "‚úÖ –û—Ç–≤–µ—á–µ–Ω–æ", callback_data=f"answered_{consultation.id}"
                )
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            text=f"üì© –ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}\n"
            f"üìõ –ò–º—è: {consultation.full_name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {consultation.phone_number}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {consultation.date_of_birth.strftime('%Y-%m-%d')}\n"
            f"‚ùì –í–æ–ø—Ä–æ—Å: {consultation.question}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {consultation.created_at.strftime('%Y-%m-%d %H:%M')}\n"
            f"üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {consultation.day_week}\n"
            f"üöö –£—Å–ª—É–≥–∞: {consultation.service_of_interest}\n"
            f"üìö –£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {consultation.level_education}\n\n"
            f"‚úÖ –û—Ç–≤–µ—Ç–∏—Ç: {admin_info}",
            reply_markup=reply_markup,
        )

    elif action == "answered":
        await sync_to_async(lambda: setattr(consultation, "status", "answered"))()
        await sync_to_async(lambda: setattr(consultation, "answered_at", now()))()
        await sync_to_async(consultation.save)()

        answered_at = await sync_to_async(
            lambda: consultation.answered_at.strftime("%Y-%m-%d %H:%M")
        )()

        await query.edit_message_text(
            text=f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}\n"
            f"üìõ –ò–º—è: {consultation.full_name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {consultation.phone_number}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {consultation.date_of_birth.strftime('%Y-%m-%d')}\n"
            f"‚ùì –í–æ–ø—Ä–æ—Å: {consultation.question}\n"
            f"üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {consultation.created_at.strftime('%Y-%m-%d %H:%M')}\n"
            f"üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {consultation.day_week}\n"
            f"üöö –£—Å–ª—É–≥–∞: {consultation.service_of_interest}\n"
            f"üìö –£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {consultation.level_education}\n"
            f"üìÖ –î–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞: {answered_at}\n\n"
            f"‚úÖ –û—Ç–≤–µ—Ç–∏–ª: {admin_info}"
        )


#
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –≤ Django.")


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))

    application.add_handler(
        CallbackQueryHandler(handle_button_click, pattern="^(approve|reject)_\d+$")
    )

    application.add_handler(
        CallbackQueryHandler(
            handle_consultation_button, pattern="^(take|answered)_\d+$"
        )
    )

    application.add_handler(
        CallbackQueryHandler(
            handle_document_button, pattern="^(approve_doc|reject_doc)_\d+$"
        )
    )

    application.run_polling()
